7.2.4		Configuring Entity Framework Core

Entity Framework Core must be configured so that it knows the type of database to which 
it will connect, which connection string describes that connection, and which context 
class will present the data in the database. Listing 7.17 shows the required changes 
to the Program.cs file.

Listing 7.17	Configuring Entity Framework Core in the Program.cs File in the SportsStore Folder

using Microsoft.EntityFrameworkCore;
using SportsStore.Models;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();

builder.Services.AddDbContext<StoreDbContext>(opts =>
{
    opts.UseSqlServer(builder.Configuration["ConnectionStrings:SportsStoreConnection"]);
});

var app = builder.Build();

app.UseStaticFiles();

app.MapDefaultControllerRoute();

app.Run();

The IConfiguration interface provides access to the ASP.NET Core configuration system, 
which includes the contents of the appsettings.json file and which I describe in detail 
in Chapter 15. Access to the configuration data is through the builder.Configuration property, 
which allows the database connection string to be obtained. Entity Framework Core is 
configured with the AddDbContext method, which registers the database context class and 
configures the relationship with the database. The UseSQLServer method declares 
that SQL Server is being used.

7.2.5		Creating a Repository

The next step is to create a repository interface and implementation class. The repository 
pattern is one of the most widely used, and it provides a consistent way to access 
the features presented by the database context class. Not everyone finds a repository 
useful, but my experience is that it can reduce duplication and ensures that operations 
on the database are performed consistently. Add a class file named IStoreRepository.cs 
to the Models folder and use it to define the interface shown in Listing 7.18

Listing 7.18 The Contents of the IStoreRepository.cs File in the SportsStore/Models Folder

namespace SportsStore.Models
{
    public interface IStoreRepository
    {
        IQueryable<Product> Products { get; }
    }
}