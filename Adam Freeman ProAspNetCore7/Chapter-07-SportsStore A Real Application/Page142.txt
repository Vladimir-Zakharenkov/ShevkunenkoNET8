7.1.5		Preparing the Application Services and the Request Pipeline

The Program.cs file is used to configure the ASP.NET Core application. Apply the changes shown in
Listing 7.5 to the Program.cs file in the SportsStore project to configure the basic application features.

Note
The Program.cs file is an important ASP.NET Core feature. I describe it in detail in Part 2.

Listing 7.5 Configuring the Application in the Program.cs File in the SportsStore Folder

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();

var app = builder.Build();

//app.MapGet("/", () => "Hello World!");

app.UseStaticFiles();

app.MapDefaultControllerRoute();

app.Run();

The builder.Service property is used to set up objects, known as services, 
that can be used throughout the application and that are accessed through 
a feature called dependency injection, which I describe in Chapter 14. 
The AddControllersWithViews method sets up the shared objects required 
by applications using the MVC Framework and the Razor view engine.

ASP.NET Core receives HTTP requests and passes them along a request pipeline, 
which is populated with middleware components registered using the app property. 
Each middleware component is able to inspect requests, modify them, generate a response, 
or modify the responses that other components have produced. The request pipeline 
is the heart of ASP.NET Core, and I describe it in detail in Chapter 12, where
I also explain how to create custom middleware components.

The UseStaticFiles method enables support for serving static content from 
the wwwroot folder and will be created later in the chapter.

One especially important middleware component provides the endpoint routing feature, 
which matches HTTP requests to the application features — known as endpoints — able 
to produce responses for them, a process I describe in detail in Chapter 13. 
The endpoint routing feature is added to the request pipeline automatically, 
and the MapDefaultControllerRoute registers the MVC Framework as a source of
endpoints using a default convention for mapping requests to classes and methods.