Using these query strings, you can navigate through the catalog of products. There is no way for
customers to figure out that these query string parameters exist, and even if there were, 
customers are not going to want to navigate this way. Instead, I need to render some page 
links at the bottom of each list of products so that customers can navigate between pages. 
To do this, I am going to create a tag helper, which generates the HTML markup for the links 
I require.

Adding the View Model

To support the tag helper, I am going to pass information to the view about the number of pages 
available, the current page, and the total number of products in the repository. The easiest 
way to do this is to create a view model class, which is used specifically to pass data between 
a controller and a view. Create a Models/ViewModels folder in the SportsStore project, 
add to it a class file named PagingInfo.cs, and define the class shown in Listing 7-27.

Listing 7-27. The Contents of the PagingInfo.cs File in the SportsStore/Models/ViewModels Folder

namespace SportsStore.Models.ViewModels
{
    public class PagingInfo
    {
        public int TotalItems { get; set; }

        public int ItemsPerPage { get; set; }

        public int CurrentPage { get; set; }

        public int TotalPages => (int)Math.Ceiling((decimal)TotalItems / ItemsPerPage);
    }
}

Adding the Tag Helper Class

Now that I have a view model, it is time to create a tag helper class. Create a folder named 
Infrastructure in the SportsStore project and add to it a class file called PageLinkTagHelper.cs, 
with the code shown in Listing 7.28 Tag helpers are a big part of ASP.NET Core development, 
and I explain how they work and how to use and create them in Chapters 25–27.

Tip
The Infrastructure folder is where I put classes that deliver the plumbing for an application but
that are not related to the application’s main functionality. You don’t have to follow 
this convention in your own projects.