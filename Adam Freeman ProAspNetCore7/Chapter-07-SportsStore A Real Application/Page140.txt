7.1.1   Creating the Unit Test Project

To create the unit test project, run the commands shown in Listing 7.2 in the same location you used for the
commands shown in Listing 7.1

Listing 7.2 Creating the Unit Test Project

dotnet new xunit -o SportsSln/SportsStore.Tests --framework net6.0
dotnet sln SportsSln add SportsSln/SportsStore.Tests
dotnet add SportsSln/SportsStore.Tests reference SportsSln/SportsStore

I am going to use the Moq package to create mock objects. Run the command shown in Listing 7.3
to install the Moq package into the unit testing project. Run this command from the same location as the
commands in Listing 7.2

Listing 7.3 Installing the Moq Package

dotnet add SportsSln/SportsStore.Tests package Moq --version 4.18.4

7.1.2  Opening the Projects

If you are using Visual Studio Code, select File ➤ Open Folder, navigate to the SportsSln folder, 
and click the Select Folder button. Visual Studio Code will open the folder and discover 
the solution and project files. When prompted, as shown in Figure 7.1, 
click Yes to install the assets required to build the projects. Select
SportsStore if Visual Studio Code prompts you to select the project to run.

If you are using Visual Studio, click the “Open a project or solution” button on the splash 
screen or select File ➤ Open ➤ Project/Solution. Select the SportsSln.sln file in the 
SportsSln folder and click the Open button to open the project.

https://sergeyshef.ru/images/freeman-asp-net-core-7/Figure-7-1.webp

Figure 7.1 Adding assets in Visual Studio Code

7.1.3   Configuring the HTTP Port

To configure the HTTP port that ASP.NET Core will use to listen for HTTP requests, 
make the changes shown in Listing 7.4 to the launchSettings.json file in the 
SportsStore/Properties folder.