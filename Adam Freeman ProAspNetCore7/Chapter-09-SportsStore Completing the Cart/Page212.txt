The problem with this approach is that I will have to duplicate the code that obtains and stores Cart
objects in any other Razor Page or controller that uses them. In this section, I am going to use the services
feature that sits at the heart of ASP.NET Core to simplify the way that Cart objects are managed, freeing
individual components from needing to deal with the details directly.

Services are commonly used to hide details of how interfaces are implemented from the components
that depend on them. But services can be used to solve lots of other problems as well and can be used to
shape and reshape an application, even when you are working with concrete classes such as Cart.

9.1.1   Creating a Storage-Aware Cart Class

The first step in tidying up the way that the Cart class is used will be to create a subclass that is aware of how
to store itself using session state. To prepare, I apply the virtual keyword to the Cart class, as shown in
Listing 9-1, so that I can override the members.

Listing 9.1 Applying the Virtual Keyword in the Cart.cs File in the SportsStore/Models Folder

namespace SportsStore.Models
{
    public class Cart
    {
        public List<CartLine> Lines { get; set; } = new List<CartLine>();

        public virtual void AddItem(Product product, int quantity)
        {
            CartLine? line = Lines
                .Where(p => p.Product.ProductID == product.ProductID)
                .FirstOrDefault();

            if (line == null)
            {
                Lines.Add(new CartLine
                {
                    Product = product,
                    Quantity = quantity
                });
            }
            else
            {
                line.Quantity += quantity;
            }
        }

        public virtual void RemoveLine(Product product) =>
            Lines.RemoveAll(l => l.Product.ProductID == product.ProductID);

        public decimal ComputeTotalValue() => Lines.Sum(e => e.Product.Price * e.Quantity);

        public virtual void Clear() => Lines.Clear();
    }

    public class CartLine
    {
        public int CartLineID { get; set; }

        public Product Product { get; set; } = new();

        public int Quantity { get; set; }
    }
}