The page model class indicates that it needs a Cart object by declaring a constructor
argument, which has allowed me to remove the statements that load and store sessions
from the handler methods. The result is a simpler page model class that focuses on its
role in the application without having to worry about how Cart objects are created or
persisted. And, since services are available throughout the application, any component
can get hold of the user’s cart using the same technique.

Updating the unit tests

The simplification of the CartModel class in listing 9.4 requires a corresponding change
to the unit tests in the CartPageTests.cs file in the unit test project so that the Cart
is provided as a constructor argument and not accessed through the context objects.
Here is the change to the test for reading the cart:

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Routing;
using Moq;
using SportsStore.Models;
using SportsStore.Pages;
using System.Linq;
using System.Text;
using System.Text.Json;
using Xunit;

namespace SportsStore.Tests
{
    public class CartPageTests
    {
        [Fact]
        public void Can_Load_Cart()
        {
            // Arrange - create a mock repository
            Product p1 = new Product { ProductID = 1, Name = "P1" };
            Product p2 = new Product { ProductID = 2, Name = "P2" };

            Mock<IStoreRepository> mockRepo = new Mock<IStoreRepository>();

            mockRepo.Setup(m => m.Products).Returns((new Product[] { p1, p2 }).AsQueryable<Product>());

            // - create a cart
            Cart testCart = new Cart();

            testCart.AddItem(p1, 2);
            testCart.AddItem(p2, 1);

            // - create a mock page context and session
            //Mock<ISession> mockSession = new Mock<ISession>();

            //byte[] data = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(testCart));

            //mockSession.Setup(c => c.TryGetValue(It.IsAny<string>(), out data!));

            //Mock<HttpContext> mockContext = new Mock<HttpContext>();

            //mockContext.SetupGet(c => c.Session).Returns(mockSession.Object);

            // Action
            //CartModel cartModel = new CartModel(mockRepo.Object)
            //{
            //    PageContext = new PageContext(new ActionContext
            //    {
            //        HttpContext = mockContext.Object,
            //        RouteData = new RouteData(),
            //        ActionDescriptor = new PageActionDescriptor()
            //    })
            //};
            CartModel cartModel = new CartModel(mockRepo.Object, testCart);

            cartModel.OnGet("myUrl");

            //Assert
            Assert.Equal(2, cartModel.Cart?.Lines.Count());
            Assert.Equal("myUrl", cartModel.ReturnUrl);
        }

        [Fact]
        public void Can_Update_Cart()
        {
            // Arrange - create a mock repository
            Mock<IStoreRepository> mockRepo = new Mock<IStoreRepository>();

            mockRepo.Setup(m => m.Products)
                .Returns((new Product[] { new Product { ProductID = 1, Name = "P1" } })
                .AsQueryable<Product>());

            Cart? testCart = new Cart();

            Mock<ISession> mockSession = new Mock<ISession>();

            mockSession.Setup(s =>
                s.Set(It.IsAny<string>(), It.IsAny<byte[]>()))
                .Callback<string, byte[]>((key, val) =>
                    {
                        testCart = JsonSerializer.Deserialize<Cart>(
                            Encoding.UTF8.GetString(val));
                    });

            Mock<HttpContext> mockContext = new Mock<HttpContext>();

            mockContext.SetupGet(c => c.Session).Returns(mockSession.Object);

            // Action
            CartModel cartModel = new CartModel(mockRepo.Object)
            {
                PageContext = new PageContext(new ActionContext
                {
                    HttpContext = mockContext.Object,
                    RouteData = new RouteData(),
                    ActionDescriptor = new PageActionDescriptor()
                })
            };

            cartModel.OnPost(1, "myUrl");

            //Assert
            Assert.Single(testCart.Lines);
            Assert.Equal("P1", testCart.Lines.First().Product.Name);
            Assert.Equal(1, testCart.Lines.First().Quantity);
        }
    }
}

I applied the same change to the unit test that checks changes to the cart: