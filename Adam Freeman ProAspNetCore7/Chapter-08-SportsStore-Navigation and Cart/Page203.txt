Implementing the Cart Feature

Now that the preparations are complete, I can implement the cart features. I started by adding a class file
called Cart.cs to the Models folder in the SportsStore project and used it to define the classes shown in
Listing 8-22.

Listing 8-22. The Contents of the Cart.cs File in the SportsStore/Models Folder

namespace SportsStore.Models
{
    public class Cart
    {
        public List<CartLine> Lines { get; set; } = new List<CartLine>();

        public void AddItem(Product product, int quantity)
        {
            CartLine? line = Lines
                .Where(p => p.Product.ProductID == product.ProductID)
                .FirstOrDefault();

            if (line == null)
            {
                Lines.Add(new CartLine
                {
                    Product = product,
                    Quantity = quantity
                });
            }
            else
            {
                line.Quantity += quantity;
            }
        }

        public void RemoveLine(Product product) =>
            Lines.RemoveAll(l => l.Product.ProductID == product.ProductID);

        public decimal ComputeTotalValue() =>
            Lines.Sum(e => e.Product.Price * e.Quantity);

        public void Clear() => Lines.Clear();
    }

    public class CartLine
    {
        public int CartLineID { get; set; }

        public Product Product { get; set; } = new();

        public int Quantity { get; set; }
    }
}

The Cart class uses the CartLine class, defined in the same file, to represent a product selected by the
customer and the quantity the user wants to buy. I defined methods to add an item to the cart, remove a
previously added item from the cart, calculate the total cost of the items in the cart, and reset the cart by
removing all the items.