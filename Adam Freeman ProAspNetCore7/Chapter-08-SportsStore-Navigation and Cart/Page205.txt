Listing 8.24 Handling requests in the Cart.cshtml file in the SportsStore/Pages folder

@page

@model CartModel

<h2>Your cart</h2>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Quantity</th>
            <th>Item</th>
            <th class="text-right">Price</th>
            <th class="text-right">Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var line in Model.Cart?.Lines
        ?? Enumerable.Empty<CartLine>())
        {
            <tr>
                <td class="text-center">@line.Quantity</td>
                <td class="text-left">@line.Product.Name</td>
                <td class="text-right">
                    @line.Product.Price.ToString("c")
                </td>
                <td class="text-right">
                    @((line.Quantity * line.Product.Price).ToString("c"))
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-right">Total:</td>
            <td class="text-right">
                @Model.Cart?.ComputeTotalValue().ToString("c")
            </td>
        </tr>
    </tfoot>
</table>

<div class="text-center">
    <a class="btn btn-primary" href="@Model.ReturnUrl">
        Continue shopping
    </a>
</div>

Razor Pages allow HTML content, Razor expressions, and code to be combined in a
single file, as I explain in chapter 23, but if you want to unit test a Razor Page, then you
need to use a separate class file. If you are using Visual Studio, there will already be a
class file named Cart.cshtml.cs in the Pages folder, which was created by the Razor
Page template item. If you are using Visual Studio Code, you will need to create the
class file separately. Use the class file, however it has been created, to define the class
shown in listing 8.25.