UNIT TEST: UPDATING EXISTING UNIT TESTS

I changed the signature of the Index action method, which will prevent some of the existing unit test
methods from compiling. To address this, I need to pass null as the first parameter to the Index
method in those unit tests that work with the controller. For example, in the Can_Use_Repository
test in the HomeControllerTests.cs file, the action section of the unit test becomes as follows:

By using null for the category argument, I receive all the Product objects that
the controller gets from the repository, which is the same situation I had before adding
the new parameter. I need to make the same change to the Can_Paginate and
Can_Send_Pagination_View_Model tests as well.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Moq;
using SportsStore.Controllers;
using SportsStore.Models;
using SportsStore.Models.ViewModels;
using Xunit;

namespace SportsStore.Tests
{
    public class HomeControllerTests
    {
        [Fact]
        public void Can_Use_Repository()
        {
            // Arrange
            Mock<IStoreRepository> mock = new Mock<IStoreRepository>();

            mock.Setup(m => m.Products).Returns((new Product[] {
                new Product {ProductID = 1, Name = "P1"},
                new Product {ProductID = 2, Name = "P2"}
                }).AsQueryable<Product>());

            HomeController controller = new HomeController(mock.Object);

            // Act
            //IEnumerable<Product>? result = (controller.Index() as ViewResult)?.ViewData.Model as IEnumerable<Product>;
            //ProductsListViewModel result = controller.Index()?.ViewData.Model as ProductsListViewModel ?? new();
            ProductsListViewModel result = controller.Index(null)?.ViewData.Model as ProductsListViewModel ?? new();


            // Assert
            //Product[] prodArray = result?.ToArray() ?? Array.Empty<Product>();
            Product[] prodArray = result.Products.ToArray();

            Assert.True(prodArray.Length == 2);
            Assert.Equal("P1", prodArray[0].Name);
            Assert.Equal("P2", prodArray[1].Name);
        }

        [Fact]
        public void Can_Paginate()
        {
            // Arrange
            Mock<IStoreRepository> mock = new Mock<IStoreRepository>();

            mock.Setup(m => m.Products).Returns((new Product[] {
                new Product {ProductID = 1, Name = "P1"},
                new Product {ProductID = 2, Name = "P2"},
                new Product {ProductID = 3, Name = "P3"},
                new Product {ProductID = 4, Name = "P4"},
                new Product {ProductID = 5, Name = "P5"}
                }).AsQueryable<Product>());

            HomeController controller = new HomeController(mock.Object);

            controller.PageSize = 3;

            // Act
            //IEnumerable<Product> result = (controller.Index(2) as ViewResult)?.ViewData.Model
            //    as IEnumerable<Product> ?? Enumerable.Empty<Product>();
            //ProductsListViewModel result = controller.Index(2)?.ViewData.Model as ProductsListViewModel ?? new();
            ProductsListViewModel result = controller.Index(null, 2)?.ViewData.Model as ProductsListViewModel ?? new();

            // Assert
            //Product[] prodArray = result.ToArray();
            Product[] prodArray = result.Products.ToArray();
            Assert.True(prodArray.Length == 2);
            Assert.Equal("P4", prodArray[0].Name);
            Assert.Equal("P5", prodArray[1].Name);
        }

        [Fact]
        public void Can_Send_Pagination_View_Model()
        {
            // Arrange
            Mock<IStoreRepository> mock = new Mock<IStoreRepository>();

            mock.Setup(m => m.Products).Returns((new Product[] {
                new Product {ProductID = 1, Name = "P1"},
                new Product {ProductID = 2, Name = "P2"},
                new Product {ProductID = 3, Name = "P3"},
                new Product {ProductID = 4, Name = "P4"},
                new Product {ProductID = 5, Name = "P5"}
                }).AsQueryable<Product>());

            // Arrange
            HomeController controller = new HomeController(mock.Object) { PageSize = 3 };

            // Act
            //ProductsListViewModel result = controller.Index(2)?.ViewData.Model as ProductsListViewModel ?? new();
            ProductsListViewModel result = controller.Index(null, 2)?.ViewData.Model as ProductsListViewModel ?? new();

            // Assert
            PagingInfo pageInfo = result.PagingInfo;
            Assert.Equal(2, pageInfo.CurrentPage);
            Assert.Equal(3, pageInfo.ItemsPerPage);
            Assert.Equal(5, pageInfo.TotalItems);
            Assert.Equal(2, pageInfo.TotalPages);
        }
    }
}

Keeping your unit tests synchronized with your code changes quickly becomes second nature when you
get into the testing mindset.