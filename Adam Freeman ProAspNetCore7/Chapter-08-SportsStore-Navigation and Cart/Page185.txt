Decorating a tag helper property with the HtmlAttributeName attribute allows me to specify 
a prefix for attribute names on the element, which in this case will be page-url-. The value 
of any attribute whose name begins with this prefix will be added to the dictionary 
that is assigned to the PageUrlValues property, which is then passed to the IUrlHelper.Action 
method to generate the URL for the href attribute of the a elements that the tag helper produces.

In Listing 8-5, I have added a new attribute to the div element that is processed by the tag helper,
specifying the category that will be used to generate the URL. I have added only one new attribute to the
view, but any attribute with the same prefix would be added to the dictionary.

Listing 8-5. Adding a New Attribute in the Index.cshtml File in the SportsStore/Views/Home Folder

@model ProductsListViewModel

@foreach (var p in Model?.Products ?? Enumerable.Empty<Product>())
{
    <partial name="ProductSummary" model="p" />
}

<div page-model="@Model?.PagingInfo" page-action="Index" page-classes-enabled="true"
     page-class="btn" page-class-normal="btn-outline-dark"
     page-class-selected="btn-primary" page-url-category="@Model?.CurrentCategory!"
     class="btn-group pull-right m-1">
</div>

I used the null-forgiving operator in the page-url-category expression so that I can pass a null value
without receiving a compiler warning.

Prior to this change, the links generated for the pagination links looked like this:

http://localhost:5000/Page1

If the user clicked a page link like this, the category filter would be lost, and the application 
would present a page containing products from all categories. By adding the current category, 
taken from the view model, I generate URLs like this instead:

http://localhost:5000/Chess/Page1

When the user clicks this kind of link, the current category will be passed to the Index action 
method, and the filtering will be preserved. To see the effect of this change, start ASP.NET Core 
and request http://localhost:5000/Chess, which will display just the products in the Chess category, 
as shown in Figure 8-2.

https://sergeyshef.ru/img/freeman-asp-net-core-6/Figure-8-2.png

Figure 8-2. Filtering data by category