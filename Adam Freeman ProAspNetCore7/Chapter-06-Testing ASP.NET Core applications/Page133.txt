Listing 6.16 A data source in the Product.cs file in the SimpleApp/Models folder

namespace SimpleApp.Models
{
    public class Product
    {
        public string Name { get; set; } = string.Empty;
        public decimal? Price { get; set; }

        //public static Product[] GetProducts() {
        // Product kayak = new Product {
        // Name = "Kayak", Price = 275M
        // };
        // Product lifejacket = new Product {
        // Name = "Lifejacket", Price = 48.95M
        // };
        // return new Product[] { kayak, lifejacket };
        //}
    }

    public class ProductDataSource : IDataSource
    {
        public IEnumerable<Product> Products => new Product[] {
            new Product { Name = "Kayak", Price = 275M },
            new Product { Name = "Lifejacket", Price = 48.95M }
            };
    }
}

The next step is to modify the controller so that it uses the ProductDataSource 
class as the source for its data, as shown in Listing 6-17.

Tip
ASP.NET Core supports a more elegant approach for solving this problem, known 
as dependency injection, which I describe in Chapter 14. Dependency injection 
often causes confusion, so I isolate components in a simpler and more manual 
way in this chapter.

Listing 6.17 Adding a property in the HomeController.cs file in the Controllers folder

using Microsoft.AspNetCore.Mvc;
using SimpleApp.Models;

namespace SimpleApp.Controllers
{
    public class HomeController : Controller
    {
        public IDataSource dataSource = new ProductDataSource();

        public ViewResult Index()
        {
            return View(dataSource.Products);
        }
    }
}

This may not seem like a significant change, but it allows me to change the data source 
the controller uses during testing, which is how I can isolate the controller. 
In Listing 6-18, I have updated the controller unit tests so they use a special version 
of the repository.