The Mock class defines an Object property, which returns the object that implements 
the specified interface with the behaviors that have been defined. I used the Object 
property to set the dataSource field defined by the HomeController, like this:

...
controller.dataSource = mock.Object;
...

The final Moq feature I used was to check that the Products property was called once, 
like this:

...
mock.VerifyGet(m => m.Products, Times.Once);
...

The VerifyGet method is one of the methods defined by the Mock class to inspect 
the state of the mock object when the test has completed. In this case, the VerifyGet 
method allows me to check the number of times that the Products property method 
has been read. The Times.Once value specifies that the VerifyGet method should 
throw an exception if the property has not been read exactly once, which will 
cause the test to fail. (The Assert methods usually used in tests work by throwing 
an exception when a test fails, which is why the VerifyGet method can be used 
to replace an Assert method when working with mock objects.)

The overall effect is the same as my fake interface implementation, but mocking 
is more flexible and more concise and can provide more insight into the behavior 
of the components under test.

Summary

•	Unit tests are typically defined within a dedicated unit test project.

•	A test framework simplifies writing unit tests by providing common features,
	such as assertions.

•	Unit tests typically follow the arrange/act/assert pattern.

•	Tests can be run within Visual Studio/Visual Studio Code or using the dotnet
	test command.

•	Effective unit tests isolate and test individual components.

•	Isolating components is simplified by mocking packages, such as Moq.