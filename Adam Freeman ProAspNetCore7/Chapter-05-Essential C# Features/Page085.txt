Using Nullable Types

The remaining warning in the Product.cs file occurs because there is a mismatch 
between the type used for the result of the GetProducts method and the values 
that are used to initialize it:

...
return new Product[] { kayak, lifejacket, null };
...

The type of the array that is created is Product[], which contains non-nullable 
Product references. But one of the values used to populate the array is null, 
which isn’t allowed. Listing 5-12 changes the array type so that nullable values 
are allowed.

Listing 5-12. Using a Nullable Type in the Product.cs File in the Models Folder

namespace LanguageFeatures.Models {
	public class Product {

		public string Name { get; set; } = string.Empty;
		public decimal? Price { get; set; }

		public static Product?[] GetProducts() {

			Product kayak = new Product {
				Name = "Kayak", Price = 275M
			};

			Product lifejacket = new Product {
				Name = "Lifejacket", Price = 48.95M
			};

			return new Product?[] { kayak, lifejacket, null };
		}
	}
}

The type Product?[] denotes an array of Product? references, which means 
the result can include null. Notice that I had to make the same change 
to the result type declared by the GetProducts method because a
Product?[] array cannot be used where a Product[] is expected.

SELECTING THE RIGHT NULLABLE TYPE

Care must be taken to apply the question mark correctly, especially when 
dealing with arrays and collections. A variable of type Product?[] denotes 
an array that can contain Product or null values but that won’t be null itself:

...
Product?[] arr1 = new Product?[] { kayak, lifejacket, null }; // OK
Product?[] arr2 = null; // Not OK
...