Listing 5-14. Using a Nullable Type in the Product.cs File in the Models Folder

namespace LanguageFeatures.Models
{
    public class Product
    {
        public string Name { get; set; } = string.Empty;
        public decimal? Price { get; set; }
        public static Product?[] GetProducts()
        {
            Product kayak = new Product
            {
                Name = "Kayak",
                Price = 275M
            };
            Product lifejacket = new Product
            {
                //Name = "Lifejacket",
                Price = 48.95M
            };

            return new Product?[] { kayak, lifejacket, null };
        }
    }
}

The type Product?[] denotes an array of Product? references, which means 
the result can include null. Notice that I had to make the same change 
to the result type declared by the GetProducts method because a
Product?[] array cannot be used where a Product[] is expected.

SELECTING THE RIGHT NULLABLE TYPE

Care must be taken to apply the question mark correctly, especially when 
dealing with arrays and collections. A variable of type Product?[] denotes 
an array that can contain Product or null values but that won’t be null itself:

...
Product?[] arr1 = new Product?[] { kayak, lifejacket, null }; // OK
Product?[] arr2 = null; // Not OK
...

A variable of type Product[]? is an array that can hold only Product values and 
not null values, but the array itself may be null:

...
Product[]? arr1 = new Product?[] { kayak, lifejacket, null }; // Not OK
Product[]? arr2 = null; // OK
...

A variable of type Product?[]? is an array that can contain Product or null 
values and that can itself be null:

...
Product?[]? arr1 = new Product?[] { kayak, lifejacket, null }; // OK
Product?[]? arr2 = null; // Also OK
...

Null state analysis is a useful feature, but that doesn’t mean it is always 
easy to understand.