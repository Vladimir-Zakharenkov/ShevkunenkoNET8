5.4.4	Checking for Null Values

I explained that dealing with null state analysis warnings can feel like chasing 
a problem through code, and you can see a simple example of this in the HomeController.cs 
file in the Controllers folder. In Listing 5-12, I changed the type returned by 
the GetProducts method to allow null values, but that has created a mismatch in 
the HomeController class, which invokes that method and assigns the result to an
array of non-nullable Product values:

...
Product[] products = Product.GetProducts();
...

This is easily resolved by changing the type of the products variable to match 
the type returned by the GetProducts method, as shown in Listing 5-13.

Listing 5-15. Changing Type in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            Product?[] products = Product.GetProducts();

            return View(new string[] { products[0].Name });
        }
    }
}

This resolves one warning and introduces another, as shown in Figure 5-3.

Figure 5-3. An additional null state analysis warning
(https://sergeyshef.ru/images/freeman-asp-net-core-7/Figure-5-3.webp)