Restart ASP.NET Core and request http://localhost:5000, which will produce 
the following output in the browser, demonstrating that I get the same result 
from the extension method, irrespective of how the Product objects are collected:

Cart Total: $323.95
Array Total: $323.95

Creating Filtering Extension Methods

The last thing I want to show you about extension methods is that they can be used 
to filter collections of objects. An extension method that operates on an IEnumerable<T> 
and that also returns an IEnumerable<T> can use the yield keyword to apply selection 
criteria to items in the source data to produce a reduced set of results. Listing 5-33 
demonstrates such a method, which I have added to the MyExtensionMethods class.

Listing 5-33. A Filtering Extension Method in the MyExtensionMethods.cs File 
in the Models Folder

namespace LanguageFeatures.Models {

	public static class MyExtensionMethods {

		public static decimal TotalPrices(this IEnumerable<Product?> products) {
			decimal total = 0;
			foreach (Product? prod in products) {
				total += prod?.Price ?? 0;
			}
			return total;
		}

		public static IEnumerable<Product?> FilterByPrice(
			this IEnumerable<Product?> productEnum, decimal minimumPrice) {

			foreach (Product? prod in productEnum) {
				if ((prod?.Price ?? 0) >= minimumPrice) {
					yield return prod;
				}
			}
		}
	}
}

This extension method, called FilterByPrice, takes an additional parameter that 
allows me to filter products so that Product objects whose Price property 
matches or exceeds the parameter are returned in the result. Listing 5-34 shows 
this method being used.