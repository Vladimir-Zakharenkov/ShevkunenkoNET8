5.14	Getting Names

There are many tasks in web application development in which you need to refer 
to the name of an argument, variable, method, or class. Common examples include 
when you throw an exception or create a validation error when processing input 
from the user. The traditional approach has been to use a string value
hard-coded with the name, as shown in Listing 5.60

Listing 5.60 Hard-Coding a Name in the HomeController.cs File 
in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            var products = new[] {
                new { Name = "Kayak", Price = 275M },
                new { Name = "Lifejacket", Price = 48.95M },
                new { Name = "Soccer ball", Price = 19.50M },
                new { Name = "Corner flag", Price = 34.95M }
                };

            return View(products.Select(p => $"Name: {p.Name}, Price: {p.Price}"));
        }
    }
}

The call to the LINQ Select method generates a sequence of strings, each of which 
contains a hard-coded reference to the Name and Price properties. Restart ASP.NET Core 
and request http://localhost:5000, and you will see the following output 
in the browser window:

Name: Kayak, Price: 275
Name: Lifejacket, Price: 48.95
Name: Soccer ball, Price: 19.50
Name: Corner flag, Price: 34.95

This approach is prone to errors, either because the name was mistyped or 
because the code was refactored and the name in the string isn’t correctly updated. 
C# supports the nameof expression, in which the compiler takes responsibility 
for producing a name string, as shown in Listing 5.61

Listing 5.61 Using nameof Expressions in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            var products = new[] {
                new { Name = "Kayak", Price = 275M },
                new { Name = "Lifejacket", Price = 48.95M },
                new { Name = "Soccer ball", Price = 19.50M },
                new { Name = "Corner flag", Price = 34.95M }
                };

            return View(products.Select(p => $"{nameof(p.Name)}: {p.Name}, {nameof(p.Price)}: {p.Price}"));
        }
    }
}