Each of the objects in the products array is an anonymously typed object. 
This does not mean that it is dynamic in the sense that JavaScript variables 
are dynamic. It just means that the type definition will be created automatically 
by the compiler. Strong typing is still enforced. You can get and set only the
properties that have been defined in the initializer, for example. Restart 
ASP.NET Core and request http://localhost:5000, and you will see the following 
output in the browser window:

Kayak
Lifejacket
Soccer ball
Corner flag

The C# compiler generates the class based on the name and type of the parameters 
in the initializer. Two anonymously typed objects that have the same property names 
and types defined in the same order will be assigned to the same automatically 
generated class. This means that all the objects in the products array will have 
the same type because they define the same properties.

Tip
I have to use the var keyword to define the array of anonymously typed objects 
because the type isn’t created until the code is compiled, so I don’t know the name 
of the type to use. The elements in an array of anonymously typed objects must 
all define the same properties; otherwise, the compiler can’t work out what
the array type should be.

To demonstrate this, I have changed the output from the example in Listing 5-45 
so that it shows the type name rather than the value of the Name property.

Listing 5-45. Displaying the Type Name in the HomeController.cs File 
in the Controllers Folder

namespace LanguageFeatures.Controllers {
	public class HomeController : Controller {

		public ViewResult Index() {
			var products = new[] {
				new { Name = "Kayak", Price = 275M },
				new { Name = "Lifejacket", Price = 48.95M },
				new { Name = "Soccer ball", Price = 19.50M },
				new { Name = "Corner flag", Price = 34.95M }
			};

			return View(products.Select(p => p.GetType().Name));
		}
	}
}