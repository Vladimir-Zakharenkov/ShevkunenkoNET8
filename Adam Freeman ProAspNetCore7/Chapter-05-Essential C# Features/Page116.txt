The methods result is IAsyncEnumerable<long?>, which denotes an asynchronous 
sequence of nullable long values. This result type has special support in .NET Core 
and works with standard yield return statements, which isn’t otherwise possible 
because the result constraints for asynchronous methods conflict with the yield 
keyword. Listing 5.59 updates the controller to use the revised method.

Listing 5.59	Using an Asynchronous Enumerable in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public async Task<ViewResult> Index()
        {
            List<string> output = new List<string>();

            await foreach (long? len in MyAsyncMethods.GetPageLengths(output, "shevkunenko.site", "sergeyshef.ru", "shevkunenko.ru"))
            {
                output.Add($"Page length: {len}");
            }

            return View(output);
        }
    }
}

The difference is that the await keyword is applied before the foreach keyword 
and not before the call to the async method. Restart ASP.NET Core and request 
http://localhost:5000; once the HTTP requests are complete, you will see that 
the order of the response messages has changed, like this:

Started request for manning.com
Completed request for manning.com
Page length: 26973
Started request for microsoft.com
Completed request for microsoft.com
Page length: 199528
Started request for amazon.com
Completed request for amazon.com
Page length: 441398

The controller receives the next result in the sequence as it is produced. As I 
explain in Chapter 19, ASP.NET Core has special support for using IAsyncEnumerable<T> 
results in web services, allowing data values to be serialized as the values 
in the sequence are generated.