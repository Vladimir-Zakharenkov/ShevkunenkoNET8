This is the familiar use of an interface, and if you restart ASP.NET Core 
and request http://localhost:5000, you will see the following output in the browser:

Kayak
Lifejacket
Soccer ball
Corner flag

If I want to add a new feature to the interface, I must locate and update all 
the classes that implement it, which can be difficult, especially if an interface 
is used by other development teams in their projects. This is where the default 
implementation feature can be used, allowing new features to be added to an interface, 
as shown in Listing 5.51.

Listing 5.51 Adding a Feature in the IProductSelection.cs File in the Models Folder

namespace LanguageFeatures.Models
{
    public interface IProductSelection
    {
        IEnumerable<Product>? Products { get; }

        IEnumerable<string>? Names => Products?.Select(p => p.Name);
    }
}

The listing defines a Names property and provides a default implementation, which 
means that consumers of the IProductSelection interface can use the Names property 
even if it isn’t defined by implementation classes, as shown in Listing 5.52

Listing 5.52	Using a Default Implementation in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers {
	public class HomeController : Controller {

		public ViewResult Index() {
			IProductSelection cart = new ShoppingCart(
				new Product { Name = "Kayak", Price = 275M },
				new Product { Name = "Lifejacket", Price = 48.95M },
				new Product { Name = "Soccer ball", Price = 19.50M },
				new Product { Name = "Corner flag", Price = 34.95M }
			);
			return View(cart.Names);
		}
	}
}

The ShoppingCart class has not been modified, but the Index method can use 
the default implementation of the Names property. Restart ASP.NET Core and 
request http://localhost:5000, and you will see the following output 
in the browser:

Kayak
Lifejacket
Soccer ball
Corner flag