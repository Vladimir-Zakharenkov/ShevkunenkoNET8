5.13	Using Asynchronous Methods

Asynchronous methods perform work in the background and notify you when they are 
complete, allowing your code to take care of other business while the background 
work is performed. Asynchronous methods are an important tool in removing bottlenecks 
from code and allow applications to take advantage of multiple processors and 
processor cores to perform work in parallel.

In ASP.NET Core, asynchronous methods can be used to improve the overall performance 
of an application by allowing the server more flexibility in the way that requests 
are scheduled and executed. Two C# keywords — async and await — are used to perform 
work asynchronously.

5.13.1	Working with Tasks Directly

C# and .NET have excellent support for asynchronous methods, but the code has tended 
to be verbose, and developers who are not used to parallel programming often get 
bogged down by the unusual syntax. To create an example, add a class file called 
MyAsyncMethods.cs to the Models folder and add the code shown in Listing 5.53

Listing 5.53	The Contents of the MyAsyncMethods.cs File in the Models Folder

namespace LanguageFeatures.Models
{
    public class MyAsyncMethods
    {
        public static Task<long?> GetPageLength()
        {
            HttpClient client = new HttpClient();

            var httpTask = client.GetAsync("http://manning.com");

            return httpTask.ContinueWith((Task<HttpResponseMessage> antecedent) =>
            {
                return antecedent.Result.Content.Headers.ContentLength;
            });
        }
    }
}

This method uses a System.Net.Http.HttpClient object to request the contents
of the Manning home page and returns its length. .NET represents work that will be
done asynchronously as a Task. Task objects are strongly typed based on the result
that the background work produces. So, when I call the HttpClient.GetAsync
method, what I get back is a Task<HttpResponseMessage>. This tells me that the
request will be performed in the background and that the result of the request will be
an HttpResponseMessage object.