Tip
When I use words like background, I am skipping over a lot of detail to make 
just the key points that are important to the world of ASP.NET Core. The .NET 
support for asynchronous methods and parallel programming is excellent, and I 
encourage you to learn more about it if you want to create truly high-performing
applications that can take advantage of multicore and multiprocessor hardware. 
You will see how ASP.NET Core makes it easy to create asynchronous web applications 
throughout this book as I introduce different features.

The part that most programmers get bogged down with is the continuation, which 
is the mechanism by which you specify what you want to happen when the task 
is complete. In the example, I have used the ContinueWith method to process 
the HttpResponseMessage object I get from the HttpClient.GetAsync method, 
which I do with a lambda expression that returns the value of a property 
that contains the length of the content I get from the Apress web server. 
Here is the continuation code:

...
return httpTask.ContinueWith((Task<HttpResponseMessage> antecedent) => {
	return antecedent.Result.Content.Headers.ContentLength;
	});
...

Notice that I use the return keyword twice. This is the part that causes 
confusion. The first use of the return keyword specifies that I am returning 
a Task<HttpResponseMessage> object, which, when the task is complete, 
will return the length of the ContentLength header. The ContentLength header 
returns a long? result (a nullable long value), and this means the result 
of my GetPageLength method is Task<long?>, like this:

...
public static Task<long?> GetPageLength() {
...

Do not worry if this does not make sense — you are not alone in your confusion. 
It is for this reason that Microsoft added keywords to C# to simplify asynchronous 
methods.

5.13.2	Applying the async and await Keywords

Microsoft introduced two keywords to C# that simplify using asynchronous methods 
like HttpClient.GetAsync. The keywords are async and await, and you can see how 
I have used them to simplify my example method in Listing 5.54

Listing 5.54 Using the async and await Keywords in the MyAsyncMethods.cs File in the Models Folder

namespace LanguageFeatures.Models
{
    public class MyAsyncMethods
    {
        public async static Task<long?> GetPageLength()
        {
            HttpClient client = new HttpClient();

            var httpMessage = await client.GetAsync("http://manning.com");

            return httpMessage.Content.Headers.ContentLength;
        }
    }
}