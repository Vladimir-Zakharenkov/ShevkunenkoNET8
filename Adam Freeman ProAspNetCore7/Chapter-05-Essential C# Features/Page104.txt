The second argument to the Filter method is a function that accepts 
a Product? object and that returns a bool value. The Filter method calls 
the function for each Product? object and includes it in the result if 
the function returns true. To use the Filter method, I can specify a method 
or create a stand-alone function, as shown in Listing 5-38.

Listing 5-38. Using a Function to Filter Objects in the HomeController.cs File 
in the Controllers Folder

namespace LanguageFeatures.Controllers {
	public class HomeController : Controller {

		bool FilterByPrice(Product? p) {
			return (p?.Price ?? 0) >= 20;
		}

		public ViewResult Index() {

			ShoppingCart cart = new ShoppingCart { Products = Product.GetProducts()};

			Product[] productArray = {
				new Product {Name = "Kayak", Price = 275M},
				new Product {Name = "Lifejacket", Price = 48.95M},
				new Product {Name = "Soccer ball", Price = 19.50M},
				new Product {Name = "Corner flag", Price = 34.95M}
			};

			Func<Product?, bool> nameFilter = delegate (Product? prod) {
				return prod?.Name?[0] == 'S';
			};

			decimal priceFilterTotal = productArray
				.Filter(FilterByPrice)
				.TotalPrices();

			decimal nameFilterTotal = productArray
				.Filter(nameFilter)
				.TotalPrices();

			return View("Index", new string[] {
				$"Price Total: {priceFilterTotal:C2}",
				$"Name Total: {nameFilterTotal:C2}" });
		}
	}
}

Neither approach is ideal. Defining methods like FilterByPrice clutters up 
a class definition. Creating a Func<Product?, bool> object avoids this problem 
but uses an awkward syntax that is hard to read and hard to maintain. It is 
this issue that lambda expressions address by allowing functions to be defined 
in a more elegant and expressive way, as shown in Listing 5-39.