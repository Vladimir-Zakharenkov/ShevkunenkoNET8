Listing 5-9. The Contents of the GlobalUsings.cs File in the LanguageFeatures Folder

global using LanguageFeatures.Models;
global using Microsoft.AspNetCore.Mvc;

The global keyword is used to denote a global using. The statements in Listing 5-9 
make the LanguageFeatures.Models and Microsoft.AspNetCore.Mvc namespaces available 
throughout the application, which means they can be removed from the HomeController.cs 
file, as shown in Listing 5-10.

Listing 5-10. Removing using Statements in the HomeController.cs File in the Controllers Folder

//using Microsoft.AspNetCore.Mvc;
//using LanguageFeatures.Models;

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            Product[] products = Product.GetProducts();

            return View(new string[] { products[0].Name });
        }
    }
}

If you run the example, you will see the following results displayed in the browser window:

Kayak

You will receive warnings when compiling the project, which I explain in 
the “Understanding Null State Analysis” section.

Note
Global using statements are a good idea, but I have not used them in this book 
because I want to make it obvious when I add a dependency to a new namespace.

5.3.1   Understanding Implicit using Statements

The ASP.NET Core project templates enable a feature named implicit usings, 
which define global using statements for these commonly required namespaces:

•   System
•   System.Collections.Generic
•   System.IO
•   System.Linq
•   System.Net.Http
•   System.Net.Http.Json
•   System.Threading
•   System.Threading.Tasks
•   Microsoft.AspNetCore.Builder
•   Microsoft.AspNetCore.Hosting
•   Microsoft.AspNetCore.Http
•   Microsoft.AspNetCore.Routing
•   Microsoft.Extensions.Configuration
•   Microsoft.Extensions.DependencyInjection
•   Microsoft.Extensions.Hosting
•   Microsoft.Extensions.Logging

using statements are not required for these namespaces, which are available throughout the
application. These namespaces don’t cover all of the ASP.NET Core features, but they 
do cover the basics, which is why no explicit using statements are required 
in the Program.cs file, for example.