The compiler processes a reference such as p.Name so that only the last part 
is included in the string, producing the same output as in previous examples. 
There is IntelliSense support for nameof expressions, so you will be prompted 
to select references, and expressions will be correctly updated when you refactor 
code. Since the compiler is responsible for dealing with nameof, using an 
invalid reference causes a compiler error, which prevents incorrect or outdated 
references from escaping notice.

Summary

•	Top-level statements allow code to be defined outside of a class, which can make
	ASP.NET Core configuration more concise.

•	Global using statements take effect throughout a project so that namespaces
	don’t have to be imported in individual C# files.

•	Null state analysis ensures that null values are only assigned to nullable types and
	that values are read safely.

•	String interpolation allows data values to be composed into strings.

•	Object initialization patterns simplify the code required to create objects.

•	Target-typed expressions omit the type name from the new statement.

•	Pattern matching is used to execute code when a value has specific characteristics.

•	Extension methods allow new functionality to be added to a type without needing
	to modify the class file.

•	Lambda expressions are a concise way to express functions.

•	Interfaces can be defined with default implementations, which means it is possible
	to modify the interface without breaking implementation classes.

•	The async and await keywords are used to create asynchronous methods without
	needing to work directly with tasks and continuations.