5.1.1	Opening the Project

If you are using Visual Studio, select File ➤ Open ➤ Project/Solution, 
select the LanguageFeatures.sln file in the LanguageFeatures folder, and 
click the Open button to open the solution file and the project it
references. If you are using Visual Studio Code, select File ➤ Open Folder, 
navigate to the LanguageFeatures folder, and click the Select Folder button.

5.1.2	Enabling the MVC Framework

The web project template creates a project that contains a minimal ASP.NET Core 
configuration. This means the placeholder content that is added by the mvc 
template used in Chapter 3 is not available and that extra steps are required 
to reach the point where the application can produce useful output. In this 
section, I make the changes required to set up the MVC Framework, which is 
one of the application frameworks supported by ASP.NET Core, as I explained 
in Chapter 1. First, to enable the MVC framework, make the changes shown
in Listing 5-2 to the Program.cs file.

Listing 5-2. Enabling MVC in the Program.cs File in the LanguageFeatures Folder

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();

var app = builder.Build();
//app.MapGet("/", () => "Hello World!");
app.MapDefaultControllerRoute();

app.Run();

I explain how to configure ASP.NET Core applications in Part 2, but the two 
statements added in Listing 5-2 provide a basic MVC framework setup using 
a default configuration.

5.1.3	Creating the Application Components

Now that the MVC framework is set up, I can add the application components 
that I will use to demonstrate important C# language features. As you create 
these components, you will see that the code editor underlines some expressions 
to warn you of potential problems. These are safe to ignore until the
“Understanding Null State Analysis” section, where I explain their significance.

Creating the Data Model

I started by creating a simple model class so that I can have some data 
to work with. I added a folder called Models and created a class file called 
Product.cs within it, which I used to define the class shown in Listing 5-3.