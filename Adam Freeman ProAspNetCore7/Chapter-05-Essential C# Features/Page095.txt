Listing 5-28. Pattern Matching in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            object[] data = new object[] { 275M, 29.95M, "apple", "orange", 100, 10 };
            decimal total = 0;

            for (int i = 0; i < data.Length; i++)
            {
                switch (data[i])
                {
                    case decimal decimalValue:
                        total += decimalValue;
                        break;
                    case int intValue when intValue > 50:
                        total += intValue;
                        break;
                }
            }
            return View("Index", new string[] { $"Total: {total:C2}" });
        }
    }
}

To match any value of a specific type, use the type and variable name in 
the case statement, like this:

...
case decimal decimalValue:
...

This case statement matches any decimal value and assigns it to a new variable 
called decimalValue. To be more selective, the when keyword can be included, 
like this:

...
case int intValue when intValue > 50:
...

This case statement matches int values and assigns them to a variable called 
intValue, but only when the value is greater than 50. Restart ASP.NET Core and 
request http://localhost:5000, and you will see the following output in 
the browser window:

Total: $404.95

5.9 Using Extension Methods

Extension methods are a convenient way of adding methods to classes that you 
cannot modify directly, typically because they are provided by Microsoft 
or a third-party package. Listing 5-29 shows the definition of the 
ShoppingCart class, which I added to the Models folder in a class file 
called ShoppingCart.cs and which represents a collection of Product objects.