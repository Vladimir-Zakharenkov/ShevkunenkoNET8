Listing 5-11. Providing a Default Value in the Product.cs File in the Models Folder

namespace LanguageFeatures.Models
{
    public class Product
    {
        public required string Name { get; set; }
        public decimal? Price { get; set; }
        public static Product[] GetProducts()
        {
            Product kayak = new Product
            {
                Name = "Kayak",
                Price = 275M
            };
            Product lifejacket = new Product
            {
                Name = "Lifejacket",
                Price = 48.95M
            };

            return new Product[] { kayak, lifejacket, null };
        }
    }
}

The compiler will check to make sure that a value is assigned to the property when a
new instance of the containing type is created. The two Product objects used in the
listing are created with a value for the Name field, which satisfies the demands of the
required keyword. Listing 5.12 omits the Name value from one of Product objects.

Listing 5.12 Omitting a value in the Product.cs file in the Models folder

namespace LanguageFeatures.Models
{
    public class Product
    {
        public required string Name { get; set; }
        public decimal? Price { get; set; }
        public static Product[] GetProducts()
        {
            Product kayak = new Product
            {
                Name = "Kayak",
                Price = 275M
            };
            Product lifejacket = new Product
            {
                //Name = "Lifejacket",
                Price = 48.95M
            };
            return new Product[] { kayak, lifejacket, null };
        }
    }
}

If you run the example, the build process will fail with this error:

Required member 'Product.Name' must be set in the object initializer or
attribute constructor.

This error—and the corresponding red line in the code editor—tell you that a value
for the Name property is required but has not been provided.