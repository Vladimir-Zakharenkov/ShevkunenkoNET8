Note
The ? and ?? operators cannot always be used, and you will see examples in later 
chapters where I use an if statement to check for null values. One common example 
is when using the await/async keywords, which are described later in this chapter, 
and which do not integrate well with the null conditional operator.

5.4.5	Overriding Null State Analysis

The C# compiler has a sophisticated understanding of when a variable can be null, 
but it doesn’t always get it right, and there are times when you have a better 
understanding of whether a null value can arise than the compiler. In these situations, 
the null - forgiving operator can be used to tell the compiler that a variable isn’t
null, regardless of what the null state analysis suggests, as shown in Listing 5-17.

Listing 5-19. Using the Null-Forgiving Operator in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            Product?[] products = Product.GetProducts();

            return View(new string[] { products[0]!.Name });
        }
    }
}

The null-forgiving operator is an exclamation mark and is used in this example 
to tell the compiler that products[0] isn’t null, even though null state analysis 
has identified that it might be.

When using the ! operator, you are telling the compiler that you have better insight 
into whether a variable can be null, and, naturally, this should be done only when 
you are entirely confident that you are right.

5.4.6	Disabling Null State Analysis Warnings

An alternative to the null-forgiving operator is to disable null state analysis warnings 
for a particular section of code or a complete code file, as shown in Listing 5-20.

Listing 5.20 Disabling warnings in the HomeController.cs file in the Controllers folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            Product?[] products = Product.GetProducts();

            #pragma warning disable CS8602
            return View(new string[] { products[0].Name });
        }
    }
}