The statement flagged by the compiler attempts to access the Name field 
of the element at index zero in the array, which might be null since 
the array type is Product?[]. Addressing this issue requires a check for
null values, as shown in Listing 5-14.

Listing 5-16. Guarding Against a null Value in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            Product?[] products = Product.GetProducts();
            Product? p = products[0];
            string val;

            if (p != null)
            {
                val = p.Name;
            }
            else
            {
                val = "No value";
            }

            return View(new string[] { val });
        }
    }
}

This is an especially verbose way of avoiding a null, which I will refine shortly. 
But it demonstrates an important point, which is that the compiler can understand 
the effect of C# expressions when checking for a null reference. In Listing 5-14, 
I use an if statement to see if a Product? variable is not null, and the compiler 
understands that the variable cannot be null within the scope of the if clause and 
doesn’t generate a warning when I read the name field:

...
if (p != null) {
	val = p.Name;
} else {
	val = "No value";
}
...

The compiler has a sophisticated understanding of C# but doesn’t always get it right, 
and I explain what to do when the compiler isn’t able to accurately determine whether 
a variable is null in the “Overriding Null State Analysis” section.

Using the Null Conditional Operator

The null conditional operator is a more concise way of avoiding member access 
for null values, as shown in Listing 5-15.