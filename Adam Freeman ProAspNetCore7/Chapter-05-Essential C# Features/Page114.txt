5.13.3	Using an Asynchronous Enumerable

An asynchronous enumerable describes a sequence of values that will be generated 
over time. To demonstrate the issue that this feature addresses, Listing 5.56 adds 
a method to the MyAsyncMethods class.

Listing 5.56	Adding a Method in the MyAsyncMethods.cs File in the Models Folder

namespace LanguageFeatures.Models
{
    public class MyAsyncMethods
    {
        public async static Task<long?> GetPageLength()
        {
            HttpClient client = new HttpClient();

            var httpMessage = await client.GetAsync("http://manning.com");

            return httpMessage.Content.Headers.ContentLength;
        }

        public static async Task<IEnumerable<long?>> GetPageLengths(List<string> output, params string[] urls)
        {
            List<long?> results = new List<long?>();

            HttpClient client = new HttpClient();

            foreach (string url in urls)
            {
                output.Add($"Started request for {url}");
                var httpMessage = await client.GetAsync($"http://{url}");
                results.Add(httpMessage.Content.Headers.ContentLength);
                output.Add($"Completed request for {url}");
            }

            return results;
        }
    }
}

The GetPageLengths method makes HTTP requests to a series of websites and gets 
their length. The requests are performed asynchronously, but there is no way 
to feed the results back to the method’s caller as they arrive. Instead, the method 
waits until all the requests are complete and then returns all the results in
one go. In addition to the URLs that will be requested, this method accepts a 
List<string> to which I add messages in order to highlight how the code works. 
Listing 5.57 updates the Index action method of the Home
controller to use the new method.