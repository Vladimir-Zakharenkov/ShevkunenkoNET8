5.8	Pattern Matching

One of the most useful recent additions to C# is support for pattern matching, 
which can be used to test that an object is of a specific type or has specific 
characteristics. This is another form of syntactic sugar, and it can
dramatically simplify complex blocks of conditional statements. The is keyword 
is used to perform a type test, as demonstrated in Listing 5-27.

Listing 5-27. Performing a Type Test in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            object[] data = new object[] { 275M, 29.95M, "apple", "orange", 100, 10 };
            decimal total = 0;

            for (int i = 0; i < data.Length; i++)
            {
                if (data[i] is decimal d)
                {
                    total += d;
                }
            }

            return View("Index", new string[] { $"Total: {total:C2}" });
        }
    }
}

The is keyword performs a type check and, if a value is of the specified type, 
will assign the value to a new variable, like this:

...
if (data[i] is decimal d) {
...

This expression evaluates as true if the value stored in data[i] is a decimal. 
The value of data[i] will be assigned to the variable d, which allows it to be 
used in subsequent statements without needing to perform any type conversions. 
The is keyword will match only the specified type, which means that only
two of the values in the data array will be processed (the other items in the 
array are string and int values). If you run the application, you will see 
the following output in the browser window:

Total: $304.95

5.8.1	Pattern Matching in switch Statements

Pattern matching can also be used in switch statements, which support the when 
keyword for restricting when a value is matched by a case statement, as shown 
in Listing 5-28.