Listing 5-53. An Asynchronous Action Method in the HomeController.cs File 
in the Controllers Folder

namespace LanguageFeatures.Controllers {
	public class HomeController : Controller {
		public async Task<ViewResult> Index() {
			long? length = await MyAsyncMethods.GetPageLength();
			return View(new string[] { $"Length: {length}" });
		}
	}
}

I have changed the result of the Index action method to Task<ViewResult>, 
which declares that the action method will return a Task that will produce 
a ViewResult object when it completes, which will provide details of the view 
that should be rendered and the data that it requires. I have added the
async keyword to the method’s definition, which allows me to use the await 
keyword when calling the MyAsyncMethods.GetPathLength method. .NET takes care 
of dealing with the continuations, and the result is asynchronous code that 
is easy to write, easy to read, and easy to maintain. Restart ASP.NET Core and
request http://localhost:5000, and you will see output similar to the following 
(although with a different length since the content of the Apress website 
changes often):

Length: 26973

Using an Asynchronous Enumerable

An asynchronous enumerable describes a sequence of values that will be generated 
over time. To demonstrate the issue that this feature addresses, Listing 5-54 adds 
a method to the MyAsyncMethods class.

Listing 5-54. Adding a Method in the MyAsyncMethods.cs File in the Models Folder

namespace LanguageFeatures.Models {

	public class MyAsyncMethods {

		public async static Task<long?> GetPageLength() {
			HttpClient client = new HttpClient();
			var httpMessage = await client.GetAsync("http://apress.com");
			return httpMessage.Content.Headers.ContentLength;
			}

			public static async Task<IEnumerable<long?>>
				GetPageLengths(List<string> output, params string[] urls) {
			List<long?> results = new List<long?>();
			HttpClient client = new HttpClient();
			foreach (string url in urls) {
				output.Add($"Started request for {url}");
				var httpMessage = await client.GetAsync($"http://{url}");
				results.Add(httpMessage.Content.Headers.ContentLength);
				output.Add($"Completed request for {url}");
			}
			return results;
		}
	}
}