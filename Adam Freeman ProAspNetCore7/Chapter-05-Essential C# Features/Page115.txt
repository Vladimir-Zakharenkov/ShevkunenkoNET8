Listing 5.57. Using the New Method in the HomeController.cs File in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public async Task<ViewResult> Index()
        {
            List<string> output = new List<string>();

            foreach (long? len in await MyAsyncMethods.GetPageLengths(output, "manning.com", "microsoft.com", "amazon.com"))
            {
                output.Add($"Page length: {len}");
            }

            return View(output);
        }
    }
}


The action method enumerates the sequence produced by the GetPageLengths method 
and adds each result to the List<string> object, which produces an ordered sequence 
of messages showing the interaction between the foreach loop in the Index method 
that processes the results and the foreach loop in the GetPageLengths method 
that generates them. Restart ASP.NET Core and request http://localhost:5000, 
and you will see the following output in the browser (which may take several 
seconds to appear and may have different page lengths):

Started request for manning.com
Completed request for manning.com
Started request for microsoft.com
Completed request for microsoft.com
Started request for amazon.com
Completed request for amazon.com
Page length: 26973
Page length: 199526
Page length: 357777

You can see that the Index action method doesn’t receive the results until all 
the HTTP requests have been completed. This is the problem that the asynchronous 
enumerable feature solves, as shown in Listing 5-56.

Listing 5.58 Using an Asynchronous Enumerable in the MyAsyncMethods.cs File in the Models Folder

namespace LanguageFeatures.Models
{
    public class MyAsyncMethods
    {
        public async static Task<long?> GetPageLength()
        {
            HttpClient client = new HttpClient();

            var httpMessage = await client.GetAsync("http://manning.com");

            return httpMessage.Content.Headers.ContentLength;
        }

        public static async IAsyncEnumerable<long?> GetPageLengths(List<string> output, params string[] urls)
        {
            HttpClient client = new HttpClient();

            foreach (string url in urls)
            {
                output.Add($"Started request for {url}");

                var httpMessage = await client.GetAsync($"https://{url}");

                output.Add($"Completed request for {url}");

                yield return httpMessage.Content.Headers.ContentLength;
            }
        }
    }
}