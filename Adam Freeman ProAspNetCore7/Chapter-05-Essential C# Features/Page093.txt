The effect is the same — to create a dictionary whose keys are Kayak and Lifejacket 
and whose values are Product objects — but the elements are created using the index 
notation that is used for other collection operations. Restart ASP.NET Core and 
request http://localhost:5000, and you will see the following results in the browser:

Kayak
Lifejacket

5.7	Using Target-Typed New Expressions

The example in Listing 5-25 is still verbose and declares the collection type 
when defining the variable and creating an instance with the new keyword:

...
Dictionary<string, Product> products = new Dictionary<string, Product> {
	["Kayak"] = new Product { Name = "Kayak", Price = 275M },
	["Lifejacket"] = new Product { Name = "Lifejacket", Price = 48.95M }
};
...

This can be simplified using a target-typed new expression, as shown in Listing 5-26.

Listing 5-26. Using a Target-Typed new Expression in the HomeController.cs File 
in the Controllers Folder

namespace LanguageFeatures.Controllers
{
    public class HomeController : Controller
    {
        public ViewResult Index()
        {
            Dictionary<string, Product> products = new()
            {
                ["Kayak"] = new Product { Name = "Kayak", Price = 275M },
                ["Lifejacket"] = new Product
                {
                    Name = "Lifejacket",
                    Price = 48.95M
                }
            };

            return View("Index", products.Keys);
        }
    }
}

The type can be replaced with new() when the compiler can determine which 
type is required and constructor arguments are provided as arguments to the 
new method. Creating instances with the new() expression works only when 
the compiler can determine which type is required. Restart ASP.NET Core and
request http://localhost:5000, and you will see the following results 
in the browser:

Kayak
Lifejacket