Understanding Implicit using Statements

The ASP.NET Core project templates enable a feature named implicit usings, 
which define global using statements for these commonly required namespaces:

System
System.Collections.Generic
System.IO
System.Linq
System.Net.Http
System.Net.Http.Json
System.Threading
System.Threading.Tasks
Microsoft.AspNetCore.Builder
Microsoft.AspNetCore.Hosting
Microsoft.AspNetCore.Http
Microsoft.AspNetCore.Routing
Microsoft.Extensions.Configuration
Microsoft.Extensions.DependencyInjection
Microsoft.Extensions.Hosting
Microsoft.Extensions.Logging

using statements are not required for these namespaces, which are available throughout the
application. These namespaces don’t cover all of the ASP.NET Core features, but they 
do cover the basics, which is why no explicit using statements are required 
in the Program.cs file, for example.

Understanding Null State Analysis

The editor and compiler warnings shown in earlier sections are produced because 
ASP.NET Core project templates enable null state analysis, in which the compiler 
identifies attempts to access references that may be unintentionally null, 
preventing null reference exceptions at runtime.

Open the Product.cs file, and the editor will display two warnings, 
as shown in Figure 5-2. The figure shows how Visual Studio displays a warning, 
but Visual Studio Code is similar.