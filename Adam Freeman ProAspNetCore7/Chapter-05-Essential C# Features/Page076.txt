Listing 5-3. The Contents of the Product.cs File in the Models Folder

namespace LanguageFeatures.Models {
	public class Product {
		public string Name { get; set; }
		public decimal? Price { get; set; }

		public static Product[] GetProducts() {

			Product kayak = new Product {
				Name = "Kayak", Price = 275M
				};

			Product lifejacket = new Product {
				Name = "Lifejacket", Price = 48.95M
				};

			return new Product[] { kayak, lifejacket, null };
		}
	}
}

The Product class defines Name and Price properties, and there is a static method 
called GetProducts that returns a Product array. One of the elements contained 
in the array returned by the GetProducts method is set to null, which I will use 
to demonstrate some useful language features later in the chapter.

Creating the Controller and View

For the examples in this chapter, I use a simple controller class to demonstrate 
different language features. I created a Controllers folder and added to it a class 
file called HomeController.cs, the contents of which are shown in Listing 5-4.

Listing 5-4. The Contents of the HomeController.cs File in the Controllers Folder

using Microsoft.AspNetCore.Mvc;

namespace LanguageFeatures.Controllers {
	public class HomeController : Controller {

		public ViewResult Index() {
			return View(new string[] { "C#", "Language", "Features" });
		}
	}
}

The Index action method tells ASP.NET Core to render the default view and provides 
it with an array of strings as its view model, which will be included in the HTML 
sent to the client. To create the view, I added a Views/Home folder (by creating 
a Views folder and then adding a Home folder within it) and added a Razor
View called Index.cshtml, the contents of which are shown in Listing 5-5.