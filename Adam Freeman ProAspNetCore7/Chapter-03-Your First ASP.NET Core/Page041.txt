Understanding Model Binding

The first overload of the RsvpForm action method renders the same view as 
before — the RsvpForm.cshtml file — to generate the form shown in Figure 3-4. The second 
overload is more interesting because of the parameter, but given that the action 
method will be invoked in response to an HTTP POST request and that
the GuestResponse type is a C# class, how are the two connected?

The answer is model binding, a useful ASP.NET Core feature whereby incoming data 
is parsed and the key-value pairs in the HTTP request are used to populate properties 
of domain model types.

Model binding is a powerful and customizable feature that eliminates 
the grind of dealing with HTTP requests directly and lets you work with 
C# objects rather than dealing with individual data values sent by
the browser. The GuestResponse object that is passed as the parameter 
to the action method is automatically populated with the data from 
the form fields. I dive into the details of model binding in Chapter 28.

To demonstrate how model binding works, I need to do some preparatory work. 
One of the application goals is to present a summary page with details of who 
is attending the party, which means that I need to keep track of the responses 
that I receive. I am going to do this by creating an in-memory collection of
objects. This isn’t useful in a real application because the response data will 
be lost when the application is stopped or restarted, but this approach will 
allow me to keep the focus on ASP.NET Core and create an application that can 
easily be reset to its initial state. Later chapters will demonstrate 
persistent data storage.

Add a class file named Repository.cs to the Models folder and use it to define 
the class shown in Listing 3-12.

Listing 3-12. The Contents of the Repository.cs File in the Models Folder

namespace PartyInvites.Models {
	public static class Repository {
		private static List<GuestResponse> responses = new();

			public static IEnumerable<GuestResponse> Responses => responses;

			public static void AddResponse(GuestResponse response) {
				Console.WriteLine(response);
				responses.Add(response);
		}
	}
}

The Repository class and its members are static, which will make it easy for me to store 
and retrieve data from different places in the application. ASP.NET Core provides 
a more sophisticated approach for defining common functionality, called dependency injection, 
which I describe in Chapter 14, but a static class is a good way to get started for a simple 
application like this one.

If you are using Visual Studio, saving the contents of the Repository.cs file will 
trigger a warning produced by the dotnet watch command telling you that a hot reload 
cannot be applied, which is the same warning described earlier in the chapter for 
Visual Studio Code users. You will see this prompt at the command line:

watch : Do you want to restart your app - Yes (y) / No (n) / Always (a) / Never (v)?

Press a to always rebuild the project.

Storing Responses

Now that I have somewhere to store the data, I can update the action method that receives 
the HTTP POST requests, as shown in Listing 3-13.

Listing 3-13. Updating an Action Method in the HomeController.cs File in the Controllers Folder

using Microsoft.AspNetCore.Mvc;
using PartyInvites.Models;

namespace PartyInvites.Controllers {
	public class HomeController : Controller {

		public IActionResult Index() {
			return View();
		}

		[HttpGet]
		public ViewResult RsvpForm() {
			return View();
		}

		[HttpPost]
		public ViewResult RsvpForm(GuestResponse guestResponse) {
			Repository.AddResponse(guestResponse);
			return View("Thanks", guestResponse);
		}
	}
}