Before the POST version of the RsvpForm method is invoked, the ASP.NET Core 
model binding feature extracts values from the HTML form and assigns them to 
the properties of the GuestResponse object. The result is used as the argument 
when the method is invoked to handle the HTTP request, and all I have to do
to deal with the form data sent in a request is to work with the GuestResponse 
object that is passed to the action method — in this case, to pass it as an argument 
to the Repository.AddResponse method so that the response can be stored.

Adding the Thanks View

The call to the View method in the RsvpForm action method creates a ViewResult 
that selects a view called Thanks and uses the GuestResponse object created 
by the model binder as the view model. Add a Razor View named Thanks.cshtml 
to the Views/Home folder with the content shown in Listing 3-14 to present 
a response to the user.

Listing 3-14. The Contents of the Thanks.cshtml File in the Views/Home Folder

@model PartyInvites.Models.GuestResponse

@{
Layout = null;
}

<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title>Thanks</title>
</head>
<body>
	<div>
		<h1>Thank you, @Model?.Name!</h1>

		@if (Model?.WillAttend == true) {
			@:It's great that you're coming. The drinks are already in the fridge!
		} else {
			@:Sorry to hear that you can't make it, but thanks for letting us know.
		}
	</div>
	Click <a asp-action="ListResponses">here</a> to see who is coming.
</body>
</html>