The @model expression specifies that the view expects to receive a GuestResponse object 
as its view model. I have defined a label and input element for each property 
of the GuestResponse model class (or, in the case of the WillAttend property, a select element). 
Each element is associated with the model property using the asp-for attribute, 
which is another tag helper attribute. The tag helper attributes configure the
elements to tie them to the view model object. Here is an example of the HTML that 
the tag helpers produce:

<p>
	<label for="Name">Your name:</label>
	<input type="text" id="Name" name="Name" value="">
</p>

The asp-for attribute on the label element sets the value of the for attribute. 
The asp-for attribute on the input element sets the id and name elements. 
This may not look especially useful, but you will see that associating elements 
with a model property offers additional advantages as the application functionality 
is defined.

Of more immediate use is the asp-action attribute applied to the form element, 
which uses the application’s URL routing configuration to set the action attribute 
to a URL that will target a specific action method, like this:

<form method="post" action="/Home/RsvpForm">

As with the helper attribute I applied to the a element, the benefit of this approach 
is that when you can change the system of URLs that the application uses, the content 
generated by the tag helpers will reflect the changes automatically.

Use the browser to request http://localhost:5000 and click the RSVP Now link to see 
the form, as shown in Figure 3-4.

Figure 3-4. Adding an HTML form to the application
(https://sergeyshef.ru/images/freeman-asp-net-core-7/Figure-3-3.webp)

3.2.6	Receiving Form Data

I have not yet told ASP.NET Core what I want to do when the form is posted to the server. 
As things stand, clicking the Submit RSVP button just clears any values you have entered 
in the form. That is because the form posts back to the RsvpForm action method in the 
Home controller, which just renders the view again. To receive and process submitted 
form data, I am going to use an important feature of controllers. I will add a
second RsvpForm action method to create the following: