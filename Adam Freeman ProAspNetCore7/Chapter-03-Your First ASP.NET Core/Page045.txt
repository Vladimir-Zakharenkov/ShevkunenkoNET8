Add a Razor View named ListResponses.cshtml to the Views/Home folder with 
the content shown in Listing 3-16.

Listing 3-16. Displaying Acceptances in the ListResponses.cshtml File in the Views/Home Folder

@model IEnumerable<PartyInvites.Models.GuestResponse>

@{
	Layout = null;
}

<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title>Responses</title>
</head>
<body>
	<h2>Here is the list of people attending the party</h2>

	<table>
		<thead>
			<tr><th>Name</th><th>Email</th><th>Phone</th></tr>
		</thead>
		<tbody>
			@foreach (PartyInvites.Models.GuestResponse r in Model!) {
			<tr>
			<td>@r.Name</td>
			<td>@r.Email</td>
			<td>@r.Phone</td>
			</tr>
			}
		</tbody>
	</table>
</body>
</html>

Razor view files have the .cshtml file extension to denote a mix of C# code 
and HTML elements. You can see this in Listing 3-16 where I have used an 
@foreach expression to process each of the GuestResponse objects that 
the action method passes to the view using the View method. Unlike a normal 
C# foreach loop, the body of a Razor @foreach expression contains HTML 
elements that are added to the response that will be sent back to the browser. 
In this view, each GuestResponse object generates a tr element that contains td
elements populated with the value of an object property.

Use the browser to request http://localhost:5000, click the RSVP Now link, and 
fill in the form. Submit the form and then click the link to see a summary 
of the data that has been entered since the application was first started, 
as shown in Figure 3-6. The view does not present the data in an appealing way,
but it is enough for the moment, and I will address the styling of the application 
later in this chapter.

Figure 3-6. Showing a list of party attendees
(https://sergeyshef.ru/img/freeman-asp-net-core-6/Figure-3-6.png)

Adding Validation

I can now add data validation to the application. Without validation, users 
could enter nonsense data or even submit an empty form. In an ASP.NET Core 
application, validation rules are defined by applying attributes to model classes, 
which means the same validation rules can be applied in any form that uses that
class. ASP.NET Core relies on attributes from the System.ComponentModel.DataAnnotations 
namespace, which I have applied to the GuestResponse class in Listing 3-17.

Listing 3-17. Applying Validation in the GuestResponse.cs File in the Models Folder

using System.ComponentModel.DataAnnotations;

namespace PartyInvites.Models {

	public class GuestResponse {

		[Required(ErrorMessage = "Please enter your name")]
		public string? Name { get; set; }

		[Required(ErrorMessage = "Please enter your email address")]
		[EmailAddress]
		public string? Email { get; set; }

		[Required(ErrorMessage = "Please enter your phone number")]
		public string? Phone { get; set; }

		[Required(ErrorMessage = "Please specify whether you'll attend")]
		public bool? WillAttend { get; set; }
	}
}