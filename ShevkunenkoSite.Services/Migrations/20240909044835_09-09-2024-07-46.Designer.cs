// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShevkunenkoSite.Services;

#nullable disable

namespace ShevkunenkoSite.Services.Migrations
{
    [DbContext(typeof(SiteDbContext))]
    [Migration("20240909044835_09-09-2024-07-46")]
    partial class _090920240746
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.AccessModel", b =>
                {
                    b.Property<Guid>("AccessModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessModelId");

                    b.ToTable("Access");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.BackgroundFileModel", b =>
                {
                    b.Property<Guid>("BackgroundFileModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BackgroundFileId");

                    b.Property<string>("LeftBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebLeftBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebRightBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BackgroundFileModelId");

                    b.ToTable("BackgroundFile");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.IconFileModel", b =>
                {
                    b.Property<Guid>("IconFileModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IconFileId");

                    b.Property<string>("IconFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconFileNameExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IconFileSize")
                        .HasColumnType("int");

                    b.Property<int>("IconHeight")
                        .HasColumnType("int");

                    b.Property<string>("IconMimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconRel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IconWidth")
                        .HasColumnType("int");

                    b.HasKey("IconFileModelId");

                    b.ToTable("IconFile");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.ImageFileModel", b =>
                {
                    b.Property<Guid>("ImageFileModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageFileId");

                    b.Property<string>("Icon100FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon100FileNameExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Icon100FileSize")
                        .HasColumnType("bigint");

                    b.Property<long?>("Icon100Height")
                        .HasColumnType("bigint");

                    b.Property<string>("Icon100MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Icon100Width")
                        .HasColumnType("bigint");

                    b.Property<string>("Icon200FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon200FileNameExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Icon200FileSize")
                        .HasColumnType("bigint");

                    b.Property<long?>("Icon200Height")
                        .HasColumnType("bigint");

                    b.Property<string>("Icon200MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Icon200Width")
                        .HasColumnType("bigint");

                    b.Property<string>("IconFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconFileNameExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IconFileSize")
                        .HasColumnType("bigint");

                    b.Property<long?>("IconHeight")
                        .HasColumnType("bigint");

                    b.Property<string>("IconMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IconWidth")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageAltTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ImageCaption")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileNameExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImageFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageHDFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ImageHDFileSize")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImageHDHeight")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageHDMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHDNameExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ImageHDWidth")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageHeight")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageMimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ImageWidth")
                        .HasColumnType("bigint");

                    b.Property<string>("SearchFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebIcon100FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebIcon100FileNameExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebIcon100FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("WebIcon100Height")
                        .HasColumnType("bigint");

                    b.Property<string>("WebIcon100MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebIcon100Width")
                        .HasColumnType("bigint");

                    b.Property<string>("WebIcon200FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebIcon200FileNameExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebIcon200FileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("WebIcon200Height")
                        .HasColumnType("bigint");

                    b.Property<string>("WebIcon200MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebIcon200Width")
                        .HasColumnType("bigint");

                    b.Property<string>("WebIconFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebIconFileNameExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebIconFileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("WebIconHeight")
                        .HasColumnType("bigint");

                    b.Property<string>("WebIconMimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebIconWidth")
                        .HasColumnType("bigint");

                    b.Property<string>("WebImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebImageFileNameExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebImageFileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("WebImageHDFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebImageHDFileSize")
                        .HasColumnType("bigint");

                    b.Property<long>("WebImageHDHeight")
                        .HasColumnType("bigint");

                    b.Property<string>("WebImageHDMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebImageHDNameExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebImageHDWidth")
                        .HasColumnType("bigint");

                    b.Property<long>("WebImageHeight")
                        .HasColumnType("bigint");

                    b.Property<string>("WebImageMimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WebImageWidth")
                        .HasColumnType("bigint");

                    b.HasKey("ImageFileModelId");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.MovieFileModel", b =>
                {
                    b.Property<Guid>("MovieFileModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MovieFileId");

                    b.Property<bool>("AllMoviesFromDB1")
                        .HasColumnType("bit");

                    b.Property<bool>("AllMoviesFromDB2")
                        .HasColumnType("bit");

                    b.Property<bool>("AllMoviesFromDB3")
                        .HasColumnType("bit");

                    b.Property<bool>("Carousel")
                        .HasColumnType("bit");

                    b.Property<string>("FramesAroundMovie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FullMovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HeadTitleForVideoLinks1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadTitleForVideoLinks2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadTitleForVideoLinks3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconType1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconType2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconType3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageFileModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageForHeadSeriesImageFileModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsImage1")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsImage2")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsImage3")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartsMoreOne1")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartsMoreOne2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartsMoreOne3")
                        .HasColumnType("bit");

                    b.Property<string>("MovieActor01")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor02")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor03")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor04")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor05")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor06")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor07")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor08")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor09")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieActor10")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MovieAdult")
                        .HasColumnType("bit");

                    b.Property<string>("MovieCaption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieCaptionForOnline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieContentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MovieDateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MovieDatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieDescriptionForSchemaOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieDescriptionHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieDirector1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieDirector2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("MovieDuration")
                        .HasColumnType("time");

                    b.Property<string>("MovieFileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MovieFileSize")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("MovieGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MovieHeight")
                        .HasColumnType("bigint");

                    b.Property<string>("MovieImbd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieInLanguage1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieInLanguage2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MovieInMainList")
                        .HasColumnType("bit");

                    b.Property<bool>("MovieIsFamilyFriendly")
                        .HasColumnType("bit");

                    b.Property<string>("MovieKinoPoisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieKinoTeatrRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieMailRuVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieMimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieMusicBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieOkVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MoviePart")
                        .HasColumnType("bigint");

                    b.Property<string>("MoviePoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MoviePosterGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MovieScreenFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieSubtitles1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieSubtitles2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MovieTotalParts")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MovieUploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovieVkVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MovieWidth")
                        .HasColumnType("bigint");

                    b.Property<string>("MovieYandexDiskVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieYouTube")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieРroductionCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PageInfoModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PageInfoModelIdForSeries")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SearchFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchFilter1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchFilter2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchFilter3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesSearchFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicGuidList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieFileModelId");

                    b.HasIndex("ImageFileModelId");

                    b.HasIndex("ImageForHeadSeriesImageFileModelId");

                    b.HasIndex("PageInfoModelId")
                        .IsUnique()
                        .HasFilter("[PageInfoModelId] IS NOT NULL");

                    b.ToTable("MovieFile");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.PageInfoModel", b =>
                {
                    b.Property<Guid>("PageInfoModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PageInfoId");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BackgroundFileModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrowserConfig")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserConfigFolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changefreq")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageFileModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manifest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OgType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PageAsRazorPage")
                        .HasColumnType("bit");

                    b.Property<string>("PageCardText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageFilterOut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageFullPath")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[PageArea] + [Controller] + [PageLoc]");

                    b.Property<string>("PageFullPathWithData")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[PageArea] + [Controller] + [PageLoc] + [RoutData]");

                    b.Property<string>("PageHeading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageIconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageKeyWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PageLastmod")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PageLinks")
                        .HasColumnType("bit");

                    b.Property<bool>("PageLinksByFilters")
                        .HasColumnType("bit");

                    b.Property<string>("PageLoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagePathNickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagePathNickNameWithData")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[PagePathNickName] + [RoutData]");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("RefPages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextOfPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoFilterOut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VideoLinks")
                        .HasColumnType("bit");

                    b.HasKey("PageInfoModelId");

                    b.HasIndex("BackgroundFileModelId");

                    b.HasIndex("ImageFileModelId");

                    b.ToTable("PageInfo");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.TopicMovieModel", b =>
                {
                    b.Property<Guid>("TopicMovieModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TopicMovieId");

                    b.Property<bool>("GeneralPageForMovieEpisodes")
                        .HasColumnType("bit");

                    b.Property<string>("IconTypeForRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ImageForRef")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfLinksPerPage")
                        .HasColumnType("int");

                    b.Property<string>("TopicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicHeadPage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicMovieModelId");

                    b.ToTable("TopicMovie");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.MovieFileModel", b =>
                {
                    b.HasOne("ShevkunenkoSite.Models.DataModels.ImageFileModel", "ImageFileModel")
                        .WithMany()
                        .HasForeignKey("ImageFileModelId");

                    b.HasOne("ShevkunenkoSite.Models.DataModels.ImageFileModel", "ImageForHeadSeries")
                        .WithMany()
                        .HasForeignKey("ImageForHeadSeriesImageFileModelId");

                    b.HasOne("ShevkunenkoSite.Models.DataModels.PageInfoModel", "PageInfoModel")
                        .WithOne("MovieFile")
                        .HasForeignKey("ShevkunenkoSite.Models.DataModels.MovieFileModel", "PageInfoModelId");

                    b.Navigation("ImageFileModel");

                    b.Navigation("ImageForHeadSeries");

                    b.Navigation("PageInfoModel");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.PageInfoModel", b =>
                {
                    b.HasOne("ShevkunenkoSite.Models.DataModels.BackgroundFileModel", "BackgroundFileModel")
                        .WithMany()
                        .HasForeignKey("BackgroundFileModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShevkunenkoSite.Models.DataModels.ImageFileModel", "ImageFileModel")
                        .WithMany()
                        .HasForeignKey("ImageFileModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackgroundFileModel");

                    b.Navigation("ImageFileModel");
                });

            modelBuilder.Entity("ShevkunenkoSite.Models.DataModels.PageInfoModel", b =>
                {
                    b.Navigation("MovieFile");
                });
#pragma warning restore 612, 618
        }
    }
}
