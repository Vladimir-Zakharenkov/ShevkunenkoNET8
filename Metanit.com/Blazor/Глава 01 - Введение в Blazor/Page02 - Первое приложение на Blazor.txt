Первое приложение на Blazor

Начнем работу с фреймворком Blazor с создания приложения, которое использует унифицированную 
модель Blazor и собственно это рекомендуемая Microsoftом модель.

Например, определим для проекта каталог HelloBlazorApp, перейдем в консоли в этот каталог 
и создадим новый проект с помощью команды dotnet new blazor:

При создании проекта ему можно передать дополнительные параметры, которые характерны 
именно для Blazor. Но в данном случае пока рассмотрим проект, который создается по умолчанию.

Создание проекта в Visual Studio

Если мы работаем в среде Visual Studio, то здесь для создания проекта Blazor 
можно использовать шаблон проекта Blazor Web App:

https://metanit.com/sharp/blazor/pics/1.8.png

Далее установим для проекта имя (например, в моем случае проект будет называться HelloBlazorApp) 
и установим каталог проекта:

https://metanit.com/sharp/blazor/pics/1.9.png

Затем нам надо настроить ряд опций для проекта:

https://metanit.com/sharp/blazor/pics/1.10.png

Здесь мы можем указать версию фреймворка .NET, которую будет использовать проект, и еще ряд опций:

•	Authentication Type: тип аутентификации, который будет применяться в проекте. Может принимать 
	два значения: None (аутентификация по умолчанию не применяется) и Individual Accounts 
	(в проект добавляется функционал системы аутентификации ASP.NET Identity)

•	Configure for HTTPS: стандартная опция, которая указывает, будет ли при запуске проекта применяться https

•	Interactive render mode: устанавливает режим рендеринга и может принимать следующие значения:

	○	Server: применяет рендеринг на стороне сервера

	○	WebAssembly: применяет рендеринг на стороне клиента

	○	Auto: при отправке содержимого клиенту применяется рендеринг на стороне сервера. 
		После того, как клиент получит содержимое. и на стороне клиента активируется среда 
		выполнения WebAssembly, применяется рендеринг на стороне клиента

	○	None: рендеринг не применяется

•	Interactivity location: устанавливает, как применяется интерактивность. Может принимать два значения:

	○	Per page/component: интерактивность применяется к отдельным страницам/компонентам

	○	Global: интерактивность применяется глобально - для всего проекта

•	Include sample pages: позволяет включить в проект при создании некоторый базовый набор страниц Razor, 
	которые позволяют протестировать функциональность

•	Do not use top-level statements: стандартная опция, которая указывает, 
	будут ли применяться инструкции верхнего уровня

Оставим все опции по умолчанию и нажнем на кнопку создания проекта.

Структура проекта

Вне зависимости, как мы создаем проект - через Visual Studio или .NET CLI, при использовании 
настроек по умолчанию после создания он будет иметь следующую структуру:

https://metanit.com/sharp/blazor/pics/1.11.png

Можно отметить, что структура проекта Blazor похожа на проекты ASP.NET Core. По сути мы имеем 
дело с проектом приложения ASP.NET Core, в рамках которого разворачивается функциональность 
фреймворка Blazor.

Основные элементы проекта:

•	Папка Properties хранит файл launchSettings.json с конфигурацией, применяемой при разработке, 
	в частности, запуске проекта

•	Папка wwwroot хранит статические файлы. По умолчанию в ней находятся используемые файлы css, 
	в частности, файлы фреймворка bootstrap.

•	Папка Components хранит компоненты - основные строительные блоки приложения. 
	В ней по умолчанию имеется два каталога:

	○	Папка Layout хранит компоненты Razor, которые определяют структуру приложения и ее отдельные части

		◙	MainLayout.razor хранит код компонента MainLayout, который определяет общий макет приложения.

		◙	NavMenu.razor хранит код компонента NavMenu, который определяет элементы навигации

	○	Папка Pages содержит компоненты Razor, которые определяют визуальную часть приложения и его логику.

		◙	Counter.razor хранит код компонента Counter, суть которого в определение счетчика, 
			значение которого увеличивается при нажатии на кнопку.

		◙	Error.razor хранит код компонента Error, который применяется для вывода сообщения об ошибке.

		◙	Weather.razor хранит код компонента Weather, который для теста выводит некоторый набор данных

		◙	Home.razor хранит код компонента Home (условно главный компонент).

•	Imports.razor содержит подключения пространств имен с помощью директивы using, 
	которые будут подключаться в компоненты Razor (файлы с расширением .razor).

•	App.razor содержит определение корневого компонента приложения, который представляет веб-страницу приложения.

•	Routes.razor определяет позволяет маршрутизацию между вложенными компонентами 
	с помощью другого встроенного компонента Router.

•	Файл appsettings.json хранит конфигурацию приложения.

•	Файл Program.cs содержит класс Program, который представляет точку входа в приложение. В данном случае 
	это стандартный для приложения ASP.NET Core класс Program, который запускает и конфигурирует хост,
	в рамках которого разворачивается приложение с Blazor.

Таким образом, проект Blazor уже содержит некоторую базовую типовую функциональность, который позволяет нам 
запустить проект и оценить работу фреймворка. Итак, запустим проект. Вначале мы увидим код компонента Home:

https://metanit.com/sharp/blazor/pics/blazorserver1.png

С помощью меню в левой части страницы мы можем перейти к другим компонентам. 
Например, перейдем к компоненту Counter:

https://metanit.com/sharp/blazor/pics/blazorserver2.png

Или к компоненту Weather, который выведет некоторые данные на страницу:

https://metanit.com/sharp/blazor/pics/blazorserver3.png

Теперь разберем, как вообще работает стандартный проект Blazor Web с типовым содержанием.

Класс Program


