Введение в ASP.NET Core

Что такое ASP.NET Core

ASP.NET Core представляет технологию для создания веб-приложений на платформе .NET, 
развиваемую компанией Microsoft. В качестве языков программирования для разработки 
приложений на ASP.NET Core используются C# и F#.

История ASP.NET фактически началась с выходом первой версии .NET в начале 2002 года 
и с тех пор ASP.NET и .NET развивались параллельно: выход новой версии .NET знаменовал 
выход новой версии ASP.NET, поскольку ASP.NET работает поверх .NET. В то же время 
изначально ASP.NET была нацелена на работу исключительно в Windows 
на веб-сервере IIS (хотя благодаря проекту Mono приложения на ASP.NET 
можно было запускать и на Linux).

Однако 2014 год ознаменовал большие перемены, фактически революцию в развитии платформы: 
компания Microsoft взяла курс на развитии ASP.NET как кроссплатформенной технологии, которая 
развивается как opensource-проект. Данное развитие платформы в дальнейшем получило название 
ASP.NET Core, собственно как ее официально именует Microsoft до сих пор. Первый релиз обновленной 
платформы увидел свет в июне 2016 года. Теперь она стала работать не только на Windows, 
но и на MacOS и Linux. Она стала более легковесной, модульной, ее стало проще конфигурировать, 
в общем, она стала больше отвечать требованиям текущего времени.

Текущая версия ASP.NET Core, которая собственно и будет охвачена в текущем руководстве, 
вышла вместе с релизом .NET 8 в ноябре 2023 года.

ASP.NET Core теперь полностью является opensource-фреймворком. Все исходные файлы 
фреймворка доступны на github в репозитории 

https://github.com/dotnet/aspnetcore/.

Архитектура и модели разработки

Текущую архитектуру платформы ASP.NET Core можно выразить следующим образом:

https://metanit.com/sharp/aspnet6/pics/1.14.png

На самом верхнем уровне располагаются различные модели взаимодействия с пользователем. 
Это технологии построения пользовательского интерфейса и обработки ввода пользователя, 
как MVC, Razor Pages, SPA (Single Page Application - одностраничные приложения с использованием 
Angular, React, Vue) и Balzor. Кроме того, это сервисы в виде встроенных HTTP API, 
библиотеки SignalR или сервисов GRPC.

Все эти технологии базируются и/или взаимодействуют с чистым ASP.NET Core, который представлен 
прежде всего различными встроенными компонентами middleware - компонентами, 
которые применяются для обработки запроса. Кроме того, технологии высшего уровня 
также взаимодействуют с различными расширениями, которые не являются непосредственной
частью ASP.NET Core, как расширения для логгирования, конфигурации и т.д.

И на самом нижнем уровне приложение ASP.NET Core работает в рамках некоторого веб-сервера, 
например, Kestrel, IIS, библиотеки HTTP.sys.

Это вкратце архитектура платформы, теперь рассмотрим моделей разработки приложения ASP.NET Core:

•	Прежде всего это базовый ASP.NET Core, который поддерживает все основные моменты, необходимые 
	для работы современного веб-приложения: маршрутизация, конфигурация, логгирования, возможность 
	работы с различными системами баз данных и т.д.. В ASP.NET Core 6 в фреймворк был добавлен 
	так называемый Minimal API - минимизированная упрощенная модель, который еще упростила процесс 
	разработки и написания кода приложения. Все остальные модели разработки работаю поверх 
	базового функционала ASP.NET Core

•	ASP.NET Core MVC представляет в общем виде построения приложения вокруг трех основных
	компонентов - Model (модели), View (представления) и Controller (контроллеры), где модели 
	отвечают за работу с данными, контроллеры представляют логику обработки запросов, 
	а представления определяют визуальную составляющую.

	https://metanit.com/sharp/aspnet6/pics/mvc.png

	•	Razor Pages представляет модель, при котором за обработку запроса отвечают специальные 
		сущности - страницы Razor Pages. Каждую отдельную такую сущность можно ассоциировать 
		с отдельной веб-страницей.

	•	ASP.NET Core Web API представляет реализацию паттерна REST, при котором для каждого типа 
		http-запроса (GET, POST, PUT, DELETE) предназначен отдельный ресурс. Подобные ресурсы 
		определяются в виде методов контроллера Web API. Данная модель особенно подходит для 
		одностраничных приложений, но не только.

	•	Blazor представляет фреймворк, который позволяет создавать интерактивные приложения
		как на стороне сервера, так и на стороне клиента и позволяет задействовать на уровне 
		браузера низкоуровневый код WebAssembly.

Особенности платформы

•	ASP.NET Core работает поверх платформы .NET и, таким образом, позволяет задействовать весь ее функционал.

•	В качестве языков разработки применяются языки программирования, поддерживаемые платформой .NET. 
	Официально встроенная поддержка для проектов ASP.NET Core есть у языков C# и F#

•	ASP.NET Core представляет кросс-платформенный фреймворк, приложения на котором могут быть развернуты на всех 
	основных популярных операционных системах: Windows, Mac OS, Linux. И таким образом, с помощью ASP.NET Core 
	мы можем как создавать кросс-платформенные приложения на Windows, на Linux и Mac OS, так и запускать на этих ОС.

•	Благодаря модульности фреймворка все необходимые компоненты веб-приложения могут загружаться как отдельные модули 
	через пакетный менеджер Nuget.

•	Поддержка работы с большинством распространенных систем баз данных: MS SQL Server, MySQL, Postgres, MongoDB

•	ASP.NET Core характеризуется расширяемостью. Фреймворк построен из набора относительно независимых компонентов. 
	И мы можем либо использовать встроенную реализацию этих компонентов, либо расширить их с помощью механизма 
	наследования, либо вовсе создать и применять свои компоненты со своим функционалом.

•	Богатый инструментарий для разработки приложений. В качестве инструментария разработки мы можем использовать 
	такую среду разработки с богатым функционалом, как Visual Studio от компании Microsoft.

•	Также можно использовать для разработки среду Rider от компании JetBrains.

•	Кроме того, имеющаяся оснастка .NET CLI позволяет создавать и запускать проекты ASP.NET в консоли. 
	И таким образом, для написания кода можно использовать обычных текстовый редактор, например, Visual Studio Code.