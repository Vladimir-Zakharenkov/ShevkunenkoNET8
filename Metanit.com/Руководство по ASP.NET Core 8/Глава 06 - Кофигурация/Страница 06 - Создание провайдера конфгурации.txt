Создание провайдера конфигурации

Фреймворк ASP.NET Core по умолчанию предоставляет богатый функционал для работы с конфигурацией - для работы 
с json, xml и так далее. Однако, в каких-то ситуациях этого может быть недостаточно. И в этом случае мы можем 
определить свои источники и провайдеры конфигурации.

Создание конфигурации вовлекает три компонента: IConfigurationSource (определяет источник конфигурации), 
ConfigurationProvider (сам провайдер конфигурации) и некий класс, который добавляет метод расширения 
к объекту IConfiguration.

Допустим, мы хотим хранить конфигурацию в простом текстовом файле. И для этого добавим новый класс, 
который назовем TextConfigurationProvider:

public class TextConfigurationProvider : ConfigurationProvider
{
    public string FilePath { get; set; }
    public TextConfigurationProvider(string path)
    {
        FilePath = path;
    }
    public override void Load()
    {
        var data = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
        using (StreamReader textReader = new StreamReader(FilePath))
        {
            string? line;
            while ((line = textReader.ReadLine()) != null)
            {
                string key = line.Trim();
                string? value = textReader.ReadLine() ?? "";
                data.Add(key, value);
            }
        }
        Data = data;
    }
}

Класс TextConfigurationProvider будет представлять провайдер конфигурации и поэтому должен быть унаследован от класса ConfigurationProvider.

В этом классе с помощью StreamReader происходит считывание текстового файла и добавление данных в словарь data. 
Для загрузки данных переопределяется метод Load(), определенный в базовом классе.

В данном случае мы предполагаем, что на первой строке будет располагаться ключ, а на следующей строке значение. 
И после считывания эти ключ и значение будут попадать в словарь data.

После считывания словарь data присваивается свойству Data, которое унаследовано от ConfigurationProvider. 
Это свойство как раз и хранит все те конфигурационные настройки, которые потом используются в программе.

И чтобы получить путь к файлу, он передается через параметр конструктора.

Далее нам надо обращаться к этому провайдеру. Для этого определим класс источника конфигурации, 
который назовем TextConfigurationSource: